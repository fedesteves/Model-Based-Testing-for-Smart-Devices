ANDROID_PRESSBACK=onView(isRoot()).perform(pressBack());
ANDROID_TAP=onControl(withName("<controlName>")).perform(click());
ANDROID_LONGTAP=onControl(withName("<controlName>")).perform(longClick());
ANDROID_DOUBLETAP=onControl(withName("<controlName>")).perform(doubleClick());
ANDROID_TYPETEXT=onControl(withTagValue(is("<controlName>"))).perform(typeText("<textToType>"));
ANDROID_SWIPE=onControl(withResourceName("scrollViewLayoutContentScroll")).perform(<actionName>());
ANDROID_SETDATE=onControl(withLabelCaption("<controlName>")).perform(click()); onControl(withResourceName("datePicker")).perform(PickerActions.setDate(<year>,<month>,<day>)); onControl(withResourceName("button1")).perform(click());
ANDROID_SETTIME=onControl(withTagValue(is("<controlName>"))).perform(replaceText("<hour>:<minute>:00"));
ANDROID_LISTTAP=onGrid(allOf()).inAdapterView(is(instanceOf(GxListView.class))).atPosition(<position>).perform(click());
ANDROID_LISTSCROLL=onGrid(allOf()).inAdapterView(is(instanceOf(GxListView.class))).atPosition(<position>).perform(scrollTo());
ANDROID_LISTINSERT=onControl(withContentDescription("Insert")).perform(click());
ANDROID_LISTSAVE=onControl(withContentDescription("Save")).perform(click());
ANDROID_LISTCANCEL=onControl(withContentDescription("Cancel")).perform(click());
ANDROID_LISTSEARCH=onControl(withContentDescription("Search")).perform(click()); onControl(withResourceName("search_src_text")).perform(typeText("<text>")); onView(isRoot()).perform(pressKey(KeyEvent.KEYCODE_ENTER));
ANDROID_LISTDELETE=onGrid(allOf()).inAdapterView(is(instanceOf(GxListView.class))).atPosition(<position>).perform(click()); onControl(withContentDescription("Delete")).perform(click()); onControl(withContentDescription("Delete")).perform(click());
ANDROID_LISTUPDATE=onGrid(allOf()).inAdapterView(is(instanceOf(GxListView.class))).atPosition(<position>).perform(click()); onControl(withContentDescription("Update")).perform(click());
ANDROID_GO=onControl(withText("<panel>")).perform(click());
ANDROID_VERIFYTEXT=onControl(withTagValue(is("<controlName>"))).check(matches(withText("<textToCheck>")));
ANDROID_ISDISPLAYED=onControl(withName("<controlName>")).check(matches(isDisplayed()));
ANDROID_ISCOMPLETELYDISPLAYED=onControl(withName("<controlName>")).check(matches(isCompletelyDisplayed()));
ANDROID_HASFOCUS=onControl(withName("<controlName>")).check(matches(hasFocus()));
ANDROID_ISENABLED=onControl(withName("<controlName>")).check(matches(isEnabled()));
ANDROID_ISCLICKABLE=onControl(withName("<controlName>")).check(matches(isClickable()));


IOS_PRESSBACK=navigationBar().buttons.element(boundBy: 0).tap()
IOS_TAP=mainTable().tap(text: "<controlName>")
IOS_LONGTAP=mainTable().otherElements["<controlName>"].press(forDuration: 4) 
IOS_DOUBLETAP=mainTable().tap(text: "<controlName>")\n\t\tmainTable().tap(text: "<controlName>")
IOS_TYPETEXT=mainTable().fill(edit: "<controlName>", value: "<textToType>")
IOS_SWIPE=XCUIApplication().otherElements["Maintable"].<actionName>()
IOS_SETDATE=mainTable().edit(date: "<controlName>", month: "<month>", day: "<day>", year: "<year>")
IOS_SETTIME=let picker:XCUIElement = XCUIApplication().datePickers.element(boundBy: 0) \npicker.pickerWheels.element(boundBy: 0).adjust(toPickerWheelValue: "<hour>")\npicker.pickerWheels.element(boundBy: 1).adjust(toPickerWheelValue: "<minute>")\npicker.pickerWheels.element(boundBy: 2).adjust(toPickerWheelValue: "<am_pm>")
IOS_LISTTAP=mainTable().grid(name: "Grid1").row(index: <position>).tap()
IOS_LISTSCROLL=
IOS_LISTINSERT=navigationBar().buttons["Add"].tap()
IOS_LISTSAVE=navigationBar().buttons["Save"].tap()
IOS_LISTCANCEL=if(navigationBar().buttons["Cancel"].exists){navigationBar().buttons["Cancel"].tap()}else{XCUIApplication().buttons["Cancel"].tap()}
IOS_LISTSEARCH=let app = XCUIApplication()\napp.otherElements["Maintable"].swipeDown()\napp.searchFields["Search"].tap()\napp.searchFields["Search"].typeText("<text>")
IOS_LISTDELETE=mainTable().grid(name: "Grid1").row(index: <position>).tap()\nnavigationBar().buttons["Edit"].tap()\nXCUIApplication().buttons["Delete"].tap()\nXCUIApplication().alerts["Delete"].buttons["Delete"].tap()
IOS_LISTUPDATE=mainTable().grid(name: "Grid1").row(index: <position>).tap()\nnavigationBar().buttons["Edit"].tap()
IOS_GO=XCUIApplication().buttons["<panelName>"].tap()
IOS_VERIFYTEXT=let x = mainTable().read(edit: "<controlName>")\n\t\tvalidateEquals(expression1: x, expression2: "<textToCheck>", message: "El valor deberia ser: <textToCheckAux>")
IOS_ISDISPLAYED=mainTable().isVisible(map: "<controlName>")
IOS_ISCOMPLETELYDISPLAYED=mainTable().isVisible(map: "<controlName>")
IOS_HASFOCUS=
IOS_ISENABLED=
IOS_ISCLICKABLE=mainTable().isVisible(map: "<controlName>")